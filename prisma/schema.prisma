generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Game Models
// Reference tables that have only parent relations
model GCollectionType {
  id          Int           @id
  name        String
  description String
  collections GCollection[]
  updatedAt   DateTime
  checksum    String
}

model GFranchise {
  id             Int             @id
  name           String
  slug           String          @unique
  mainGames      Game[]
  secondaryGames GameFranchise[]
  updatedAt      DateTime
  checksum       String
}

model GRegion {
  id            Int             @id
  name          String
  identifier    String
  category      String
  localizations GLocalization[]
  updatedAt     DateTime
  checksum      String
}

model GCompanyLogo {
  id           Int        @id
  aplhaChannel Boolean    @default(false)
  animated     Boolean    @default(false)
  imageId      String
  width        Int?
  height       Int?
  companies    GCompany[]
  checksum     String
}

model GEngineLogo {
  id           Int       @id
  aplhaChannel Boolean   @default(false)
  animated     Boolean   @default(false)
  imageId      String
  width        Int?
  height       Int?
  engines      GEngine[]
  checksum     String
}

model GPlatformLogo {
  id           Int         @id
  aplhaChannel Boolean     @default(false)
  animated     Boolean     @default(false)
  imageId      String
  width        Int?
  height       Int?
  platforms    GPlatform[]
  checksum     String
}

model GPlatformFamily {
  id        Int         @id
  name      String
  slug      String      @unique
  platforms GPlatform[]
  checksum  String
}

model GMode {
  id        Int        @id
  name      String
  slug      String     @unique
  games     GameMode[]
  updatedAt DateTime
  checksum  String
}

model GGenre {
  id        Int         @id
  name      String
  slug      String      @unique
  games     GameGenre[]
  updatedAt DateTime
  checksum  String
}

model GLanguage {
  id         Int                @id
  name       String
  nativeName String
  locale     String
  supports   GLanguageSupport[]
  updatedAt  DateTime
  checksum   String
}

model GLanguageSupportType {
  id        Int                @id
  name      String
  supports  GLanguageSupport[]
  updatedAt DateTime
  checksum  String
}

model GPlayerPerspective {
  id        Int                     @id
  name      String
  slug      String                  @unique
  games     GamePlayerPerspective[]
  updatedAt DateTime
  checksum  String
}

model GReleaseDateStatus {
  id          Int            @id
  name        String
  description String
  releases    GReleaseDate[]
  updatedAt   DateTime
  checksum    String
}

model GTheme {
  id        Int         @id
  name      String
  slug      String      @unique
  games     GameTheme[]
  updatedAt DateTime
  checksum  String
}

// Main Table
model Game {
  id                 Int                     @id
  name               String
  slug               String                  @unique
  category           Int
  firstReleaseDate   DateTime?
  rating             Float
  reviewsCount       Int
  follows            Int
  hypes              Int
  status             Int?
  summary            String?
  altNames           GAltName[]
  ageRatings         GAgeRating[]
  mainSeries         GCollection?            @relation(fields: [mainSeriesId], references: [id])
  mainSeriesId       Int?
  collections        GameCollection[]
  cover              GCover?
  localizations      GLocalization[]
  mainFranchise      GFranchise?             @relation(fields: [mainFranchiseId], references: [id])
  mainFranchiseId    Int?
  franchises         GameFranchise[]
  developers         GameDeveloper[]
  publishers         GamePublisher[]
  engines            GameEngine[]
  externalServices   GExternalService[]
  modes              GameMode[]
  genres             GameGenre[]
  languageSupports   GLanguageSupport[]
  playerPerspectives GamePlayerPerspective[]
  platforms          GamePlatform[]
  releaseDates       GReleaseDate[]
  screenshots        GScreenshot[]
  videos             GVideo[]
  themes             GameTheme[]
  websites           GWebsite[]
  updatedAt          DateTime
  checksum           String

  // Similar games
  similarOf GameSimilarGame[] @relation("Similar Game")
  similarTo GameSimilarGame[]

  // Categories relations
  // 1
  dlcs              Game[] @relation("DLC")
  dlcOf             Game?  @relation("DLC", fields: [dlcOfId], references: [id])
  dlcOfId           Int?
  // 2
  expansions        Game[] @relation("Expansion")
  expansionOf       Game?  @relation("Expansion", fields: [expansionOfId], references: [id])
  expansionOfId     Int?
  // 4
  standaloneDlcs    Game[] @relation("Standalone DLC")
  standaloneDlcOf   Game?  @relation("Standalone DLC", fields: [standaloneDlcOfId], references: [id])
  standaloneDlcOfId Int?
  // 5
  mods              Game[] @relation("Mod")
  modOf             Game?  @relation("Mod", fields: [modOfId], references: [id])
  modOfId           Int?
  //6
  episodes          Game[] @relation("Episode")
  episodeOf         Game?  @relation("Episode", fields: [episodeOfId], references: [id])
  episodeOfId       Int?
  //7
  seasons           Game[] @relation("Season")
  seasonOf          Game?  @relation("Season", fields: [seasonOfId], references: [id])
  seasonOfId        Int?
  // 8
  remakes           Game[] @relation("Remake")
  remakeOf          Game?  @relation("Remake", fields: [remakeOfId], references: [id])
  remakeOfId        Int?
  // 9
  remasters         Game[] @relation("Remaster")
  remasterOf        Game?  @relation("Remaster", fields: [remasterOfId], references: [id])
  remasterOfId      Int?
  // 10
  expandedEditions  Game[] @relation("Expanded Edition")
  expandedFrom      Game?  @relation("Expanded Edition", fields: [expandedFromId], references: [id])
  expandedFromId    Int?
  // 11
  ports             Game[] @relation("Port")
  portOf            Game?  @relation("Port", fields: [portOfId], references: [id])
  portOfId          Int?
  // 12
  forks             Game[] @relation("Fork")
  forkOf            Game?  @relation("Fork", fields: [forkOfId], references: [id])
  forkOfId          Int?
  // 13
  packs             Game[] @relation("Pack")
  packOf            Game?  @relation("Pack", fields: [packOfId], references: [id])
  packOfId          Int?
  // 14
  updates           Game[] @relation("Update")
  updateOf          Game?  @relation("Update", fields: [updateOfId], references: [id])
  updateOfId        Int?

  // vesion_parent
  versions     Game[]  @relation("Version")
  versionOf    Game?   @relation("Version", fields: [versionOfId], references: [id])
  versionOfId  Int?
  versionTitle String?
}

// Models for tables where rows unique to each Game
model GAgeRating {
  id             Int                     @id
  category       Int
  rating         Int
  synopsis       String?
  ratingCoverUrl String?
  game           Game                    @relation(fields: [gameId], references: [id])
  gameId         Int
  descriptions   GAgeRatingDescription[]
  checksum       String
}

model GAgeRatingDescription {
  id          Int        @id
  category    Int
  description String
  ageRating   GAgeRating @relation(fields: [ageRatingId], references: [id])
  ageRatingId Int
  checksum    String
}

model GAltName {
  id       Int     @id
  name     String
  comment  String?
  game     Game    @relation(fields: [gameId], references: [id])
  gameId   Int
  checksum String
}

model GCover {
  id           Int     @id
  aplhaChannel Boolean @default(false)
  animated     Boolean @default(false)
  imageId      String
  width        Int?
  height       Int?
  game         Game    @relation(fields: [gameId], references: [id])
  gameId       Int     @unique
  checksum     String
}

model GLocalization {
  id        Int      @id
  name      String?
  region    GRegion? @relation(fields: [regionId], references: [id])
  regionId  Int?
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  updatedAt DateTime
  checksum  String
}

model GExternalService {
  id         Int        @id
  name       String?
  category   Int
  countries  Int[]
  media      Int?
  platform   GPlatform? @relation(fields: [platformId], references: [id])
  platformId Int?
  game       Game       @relation(fields: [gameId], references: [id])
  gameId     Int
  url        String?
  updatedAt  DateTime
  checksum   String
}

model GLanguageSupport {
  id            Int                  @id
  game          Game                 @relation(fields: [gameId], references: [id])
  gameId        Int
  language      GLanguage            @relation(fields: [languageId], references: [id])
  languageId    Int
  supportType   GLanguageSupportType @relation(fields: [supportTypeId], references: [id])
  supportTypeId Int
  updatedAt     DateTime
  checksum      String
}

model GReleaseDate {
  id         Int                 @id
  category   Int
  game       Game                @relation(fields: [gameId], references: [id])
  gameId     Int
  date       DateTime?
  human      String
  m          Int?
  y          Int?
  status     GReleaseDateStatus? @relation(fields: [statusId], references: [id])
  statusId   Int?
  platform   GPlatform           @relation(fields: [platformId], references: [id])
  platformId Int
  region     Int
  updatedAt  DateTime
  checksum   String
}

model GScreenshot {
  id           Int     @id
  alphaChannel Boolean @default(false)
  animated     Boolean @default(false)
  imageId      String
  width        Int?
  height       Int?
  game         Game    @relation(fields: [gameId], references: [id])
  gameId       Int
  checksum     String
}

model GVideo {
  id       Int     @id
  videoId  String
  name     String?
  game     Game    @relation(fields: [gameId], references: [id])
  gameId   Int
  checksum String
}

// 2nd-order tables
model GCollection {
  id             Int              @id
  name           String
  slug           String           @unique
  type           GCollectionType? @relation(fields: [typeId], references: [id])
  typeId         Int?
  mainGames      Game[]
  secondaryGames GameCollection[]
  updatedAt      DateTime
  checksum       String
}

model GCompany {
  id                 Int                 @id
  name               String
  slug               String              @unique
  startDate          DateTime?
  startDateCategory  Int?
  changeDate         DateTime?
  changeDateCategory Int?
  oldCompany         GCompany[]          @relation("Change Company")
  newCompany         GCompany?           @relation("Change Company", fields: [newCompanyId], references: [id])
  newCompanyId       Int?
  country            Int?
  description        String?
  developedGames     GameDeveloper[]
  publishedGame      GamePublisher[]
  logo               GCompanyLogo?       @relation(fields: [logoId], references: [id])
  logoId             Int?
  childCompanies     GCompany[]          @relation("Parent Company")
  parentCompany      GCompany?           @relation("Parent Company", fields: [parentCompanyId], references: [id])
  parentCompanyId    Int?
  engines            GameEngineCompany[]
  updatedAt          DateTime
  checksum           String
}

model GEngine {
  id          Int                  @id
  name        String
  slug        String               @unique
  description String?
  games       GameEngine[]
  companies   GameEngineCompany[]
  logo        GEngineLogo?         @relation(fields: [logoId], references: [id])
  logoId      Int?
  platforms   GameEnginePlatform[]
  updatedAt   DateTime
  checksum    String
}

model GPlatform {
  id               Int                  @id
  abbreviation     String?
  alternativeName  String?
  name             String
  slug             String               @unique
  category         Int?
  generation       Int?
  family           GPlatformFamily?     @relation(fields: [familyId], references: [id])
  familyId         Int?
  logo             GPlatformLogo?       @relation(fields: [logoId], references: [id])
  logoId           Int?
  summary          String?
  games            GamePlatform[]
  releases         GReleaseDate[]
  externalServices GExternalService[]
  engines          GameEnginePlatform[]
  updatedAt        DateTime
  checksum         String
}

model GWebsite {
  id       Int     @id
  category Int
  url      String
  trusted  Boolean
  game     Game    @relation(fields: [gameId], references: [id])
  gameId   Int
  checksum String
}

// Join tables
model GameCollection {
  game         Game        @relation(fields: [gameId], references: [id])
  gameId       Int
  collection   GCollection @relation(fields: [collectionId], references: [id])
  collectionId Int

  @@id([gameId, collectionId])
}

model GameFranchise {
  game        Game       @relation(fields: [gameId], references: [id])
  gameId      Int
  franchise   GFranchise @relation(fields: [franchiseId], references: [id])
  franchiseId Int

  @@id([gameId, franchiseId])
}

model GameDeveloper {
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  developer   GCompany @relation(fields: [developerId], references: [id])
  developerId Int

  @@id([gameId, developerId])
}

model GamePublisher {
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  publisher   GCompany @relation(fields: [publisherId], references: [id])
  publisherId Int

  @@id([gameId, publisherId])
}

model GameEngineCompany {
  engine    GEngine  @relation(fields: [engineId], references: [id])
  engineId  Int
  company   GCompany @relation(fields: [companyId], references: [id])
  companyId Int

  @@id([engineId, companyId])
}

model GameEngine {
  game     Game    @relation(fields: [gameId], references: [id])
  gameId   Int
  engine   GEngine @relation(fields: [engineId], references: [id])
  engineId Int

  @@id([gameId, engineId])
}

model GamePlatform {
  game       Game      @relation(fields: [gameId], references: [id])
  gameId     Int
  platform   GPlatform @relation(fields: [platformId], references: [id])
  platformId Int

  @@id([gameId, platformId])
}

model GameEnginePlatform {
  engine     GEngine   @relation(fields: [engineId], references: [id])
  engineId   Int
  platform   GPlatform @relation(fields: [platformId], references: [id])
  platformId Int

  @@id([engineId, platformId])
}

model GameMode {
  game   Game  @relation(fields: [gameId], references: [id])
  gameId Int
  mode   GMode @relation(fields: [modeId], references: [id])
  modeId Int

  @@id([gameId, modeId])
}

model GameGenre {
  game    Game   @relation(fields: [gameId], references: [id])
  gameId  Int
  genre   GGenre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([gameId, genreId])
}

model GamePlayerPerspective {
  game          Game               @relation(fields: [gameId], references: [id])
  gameId        Int
  perspective   GPlayerPerspective @relation(fields: [perspectiveId], references: [id])
  perspectiveId Int

  @@id([gameId, perspectiveId])
}

model GameSimilarGame {
  game      Game @relation("Similar Game", fields: [gameId], references: [id])
  gameId    Int
  similar   Game @relation(fields: [similarId], references: [id])
  similarId Int

  @@id([gameId, similarId])
}

model GameTheme {
  game    Game   @relation(fields: [gameId], references: [id])
  gameId  Int
  theme   GTheme @relation(fields: [themeId], references: [id])
  themeId Int

  @@id([gameId, themeId])
}

// Cinema tables
// Reference tables
model MGenre {
  id     Int          @id
  name   String
  movies MovieGenre[]
}

model TVGenre {
  id    Int           @id
  name  String
  shows TVShowGenre[]
}

model CinemaPerson {
  id             Int             @id
  name           String
  actedMovies    MovieActor[]
  directedMovies MovieDirector[]
  createdShows   TVShowCreator[]
}

model CinemaCountry {
  id          Int             @id @default(autoincrement())
  iso31661    String          @unique
  englishName String
  nativeName  String
  movies      MovieCountry[]
  shows       TVShowCountry[]
}

model TVNetwork {
  id       Int             @id
  name     String
  logoPath String?
  shows    TVShowNetwork[]
}

// Movies tables
model Movie {
  id                  Int               @id
  originalLanguage    String?
  originaltitle       String?
  title               String
  posterPath          String?
  popularity          Float
  runtime             Int?
  budget              Int?
  primaryReleaseDate  DateTime
  releaseCountries    MReleaseCountry[]
  genres              MovieGenre[]
  productionCountries MovieCountry[]
  actors              MovieActor[]
  directors           MovieDirector[]
}

// Child tables
model MReleaseCountry {
  id            Int             @id @default(autoincrement())
  iso31661      String
  localReleases MLocalRelease[]
  movie         Movie           @relation(fields: [movieId], references: [id])
  movieId       Int
}

model MLocalRelease {
  id               Int             @id @default(autoincrement())
  note             String?
  releaseDate      DateTime
  type             Int
  releaseCountry   MReleaseCountry @relation(fields: [releaseCountryId], references: [id])
  releaseCountryId Int
}

// Join tables
model MovieGenre {
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId Int
  genre   MGenre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([movieId, genreId])
}

model MovieActor {
  movie   Movie        @relation(fields: [movieId], references: [id])
  movieId Int
  actor   CinemaPerson @relation(fields: [actorId], references: [id])
  actorId Int

  @@id([movieId, actorId])
}

model MovieDirector {
  movie      Movie        @relation(fields: [movieId], references: [id])
  movieId    Int
  director   CinemaPerson @relation(fields: [directorId], references: [id])
  directorId Int

  @@id([movieId, directorId])
}

model MovieCountry {
  movie      Movie         @relation(fields: [movieId], references: [id])
  movieId    Int
  country    CinemaCountry @relation(fields: [countryIso], references: [iso31661])
  countryIso String

  @@id([movieId, countryIso])
}

// TV Shows tables
model TVShow {
  id                  Int             @id
  name                String
  genres              TVShowGenre[]
  episodeRunTimes     Int[]
  firstAirDate        DateTime?
  lastAirDate         DateTime?
  inProduction        Boolean
  languages           String[]
  creators            TVShowCreator[]
  networks            TVShowNetwork[]
  originCountries     String[]
  originalLanguage    String
  originalName        String
  popularity          Float
  posterPath          String?
  productionCountries TVShowCountry[]
  seasons             TVSeason[]
  status              String
  type                String
  voteAverage         Float
}

// Child tables

model TVSeason {
  id           Int       @id @default(autoincrement())
  name         String
  seasonNumber Int
  posterPath   String?
  airDate      DateTime?
  episodeCount Int?
  voteAverage  Float
  show         TVShow    @relation(fields: [showId], references: [id])
  showId       Int
}

// Join tables
model TVShowGenre {
  show    TVShow  @relation(fields: [showId], references: [id])
  showId  Int
  genre   TVGenre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([showId, genreId])
}

model TVShowCreator {
  show      TVShow       @relation(fields: [showId], references: [id])
  showId    Int
  creator   CinemaPerson @relation(fields: [creatorId], references: [id])
  creatorId Int

  @@id([showId, creatorId])
}

model TVShowNetwork {
  show      TVShow    @relation(fields: [showId], references: [id])
  showId    Int
  network   TVNetwork @relation(fields: [networkId], references: [id])
  networkId Int

  @@id([showId, networkId])
}

model TVShowCountry {
  show       TVShow        @relation(fields: [showId], references: [id])
  showId     Int
  country    CinemaCountry @relation(fields: [countryIso], references: [iso31661])
  countryIso String

  @@id([showId, countryIso])
}
